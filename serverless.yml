# "org" ensures this Service is used with the correct Serverless Framework Access Key.
org: lash0000
# "app" enables Serverless Framework Dashboard features and sharing them with other Services.
app: gen-hotel
# "service" is the name of this project. This will also be added to your AWS resource names.
service: sia-mongo

plugins:
  - serverless-dotenv-plugin
  - serverless-offline

provider:
  name: aws
  runtime: nodejs20.x
  region: ap-southeast-2
  environment:
    S3_BUCKET_NAME: ${env:S3_BUCKET_NAME}
    S3_BUCKET_URL: ${env:S3_BUCKET_URL}
    FILE_UPLOAD_QUEUE_URL: !Ref FileUploadQueue
    MONGODB_URI: ${env:MONGODB_URI}
    MAIL_USERNAME: ${env:MAIL_USERNAME}
    MAIL_PASSWORD: ${env:MAIL_PASSWORD}
    JWT_REFRESH_SECRET: ${env:JWT_REFRESH_SECRET}
    JWT_ACCESS_SECRET: ${env:JWT_ACCESS_SECRET}

# Package configuration (This is already save my life ^^)
package:
  individually: true
  exclude:
    - test/**
    - .git/**
    - .vscode/**
    - venv/**
    - coverage/**

# If this does not work thru production DEADD!!!

functions:
  assistanceChat:
    handler: app.handler
    timeout: 28
    events:
      - httpApi:
          path: /api/v1/hotel/hotel_chats/
          method: get
      - httpApi:
          path: /api/v1/hotel/hotel_chats/
          method: post

  guestAccounts:
    handler: app.handler
    timeout: 28
    events:
      - httpApi:
          path: /api/v1/hotel/guest_accounts/auth/sessions
          method: get
      - httpApi:
          path: /api/v1/hotel/guest_accounts/auth/login
          method: post
      - httpApi:
          path: /api/v1/hotel/guest_accounts
          method: get
      - httpApi:
          path: /api/v1/hotel/guest_accounts
          method: post
      - httpApi:
          path: /api/v1/hotel/guest_accounts/{id}
          method: get
      - httpApi:
          path: /api/v1/hotel/guest_accounts/{id}
          method: put

  uploadQueues:
    handler: app.handler
    timeout: 28
    events:
      - httpApi:
          path: /api/v1/hotel/uploads/queues
          method: get
      - httpApi:
          path: /api/v1/hotel/uploads/queues/{id}
          method: get
      - httpApi:
          path: /api/v1/hotel/uploads/queues
          method: post
      - httpApi:
          path: /api/v1/hotel/uploads/queues/{id}
          method: delete
      - httpApi:
          path: /api/v1/hotel/uploads/queues/user/{id}
          method: delete

  hotelRooms:
    handler: app.handler
    timeout: 28
    events:
      - httpApi:
          path: /api/v1/hotel/hotel_rooms
          method: get
      - httpApi:
          path: /api/v1/hotel/hotel_rooms/{id}
          method: get
      - httpApi:
          path: /api/v1/hotel/hotel_rooms
          method: post

  mediaFiles:
    handler: app.handler
    timeout: 28
    events:
      - httpApi:
          path: /api/v1/hotel/uploads/room_management/media_files
          method: get
      - httpApi:
          path: /api/v1/hotel/uploads/room_management/media_files/{id}
          method: get
      - httpApi:
          path: /api/v1/hotel/uploads/room_management/media_files
          method: post
      - httpApi:
          path: /api/v1/hotel/uploads/room_management/media_files/{id}
          method: delete
      - httpApi:
          path: /api/v1/hotel/uploads/room_management/media_files/user/{id}
          method: delete

    # employee_records file

      - httpApi:
          path: /api/v1/hotel/uploads/employee_records/media_files
          method: get
      - httpApi:
          path: /api/v1/hotel/uploads/employee_records/media_files/{id}
          method: get
      - httpApi:
          path: /api/v1/hotel/uploads/employee_records/media_files
          method: post
      # delete per id
      - httpApi:
          path: /api/v1/hotel/uploads/employee_records/media_files/{id}
          method: delete
      # delete_all
      - httpApi:
          path: /api/v1/hotel/uploads/employee_records/media_files/user/{id}
          method: delete

  otpRecovery:
    handler: app.handler
    timeout: 28
    events:
      - httpApi:
          path: /api/v1/hotel/otp/forgot_password
          method: get
      - httpApi:
          path: /api/v1/hotel/otp/forgot_password
          method: post

  otpRegistration:
    handler: app.handler
    timeout: 28
    events:
      - httpApi:
          path: /api/v1/hotel/otp/registration
          method: get
      - httpApi:
          path: /api/v1/hotel/otp/registration
          method: post

  staffAccounts:
    handler: app.handler
    timeout: 28
    events:
      - httpApi:
          path: /
          method: get
      - httpApi:
          path: /api/v1/hotel/staff_accounts
          method: get
      - httpApi:
          path: /api/v1/hotel/staff_accounts/auth/sessions
          method: get
      - httpApi:
          path: /api/v1/hotel/staff_accounts/auth/login
          method: post
      - httpApi:
          path: /api/v1/hotel/staff_accounts
          method: post
      - httpApi:
          path: /api/v1/hotel/staff_accounts/temporary
          method: post
      - httpApi:
          path: /api/v1/hotel/staff_accounts/{id}
          method: get
      - httpApi:
          path: /api/v1/hotel/staff_accounts/{id}
          method: put
  
  auditLogs:
    handler: app.handler
    timeout: 28
    events:
      - httpApi:
          path: /api/v1/hotel/audit_logs
          method: get
      - httpApi:
          path: /api/v1/hotel/audit_logs/{id}
          method: get
      - httpApi:
          path: /api/v1/hotel/audit_logs
          method: post
  
  deleteUnnecessary:
    handler: lateSchedule.handler
    timeout: 28
    events:
      - schedule: cron(*/45 * * * ? *)

  deleteScheduledFiles:
    handler: queueSchedule.handler
    timeout: 28
    events:
      - schedule: cron(*/3 * * * ? *) # every 3 minute please refer to https://crontab.guru/